package com.rolebasejwttoken.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.rolebasejwttoken.jwt.JwtTokenUtil;
import com.rolebasejwttoken.model.AuthRequest;
import com.rolebasejwttoken.model.AuthResponse;
import com.rolebasejwttoken.model.CustomUserDetails;
import com.rolebasejwttoken.model.User;
import com.rolebasejwttoken.service.UserService;

@RestController
@RequestMapping("/auth")
public class AuthApi {
	@Autowired
	AuthenticationManager authManager;
	@Autowired
	JwtTokenUtil jwtUtil;

//	@PostMapping("/login")
//	public ResponseEntity<?> login(@RequestBody @Valid AuthRequest request) {
//	    try {
//	        Authentication authentication = authManager.authenticate(
//	                new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword()));
//
//	        CustomUserDetails customUserDetails = (CustomUserDetails) authentication.getPrincipal();
//	        // Now you can get the User object from CustomUserDetails
//	        User user = customUserDetails.getUser();
//
//	        String accessToken = jwtUtil.generateAccessToken(user);
//	        AuthResponse response = new AuthResponse(user.getEmail(), accessToken);
//
//	        return ResponseEntity.ok().body(response);
//
//	    } catch (BadCredentialsException ex) {
//	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
//	    }
//	}
//
//	
	
	
	
	
	
	
	
	
	
	 @Autowired
	    private AuthenticationManager authenticationManager;

	    @Autowired
	    private UserService userDetailsService;

	    @Autowired
//	    private JwtUtil jwtUtil;
	
	
	
	
	
	

    @PostMapping("/authenticate")
    public ResponseEntity<?> createAuthenticationToken(@RequestBody JwtRequest authenticationRequest) {
        final Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(authenticationRequest.getUsername(), authenticationRequest.getPassword())
        );

        final UserDetails userDetails = userDetailsService.loadUserByUsername(authenticationRequest.getUsername());

        final String jwt = jwtUtil.generateToken(userDetails);

        return ResponseEntity.ok(new JwtResponse(jwt));
    }
}
