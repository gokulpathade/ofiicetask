package com.rolebasejwttoken.config;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.util.ObjectUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import com.rolebasejwttoken.jwt.JwtTokenUtil;
import com.rolebasejwttoken.model.CustomUserDetails;
import com.rolebasejwttoken.model.User;
import com.rolebasejwttoken.service.UserService;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.JwtException;

import io.jsonwebtoken.MalformedJwtException;

@Component
public class JwtTokenFilter extends OncePerRequestFilter {

	private final JwtTokenUtil jwtUtil;

	private UserService userService;

	private static final Logger log = LoggerFactory.getLogger(JwtTokenUtil.class);

	public JwtTokenFilter(JwtTokenUtil jwtUtil) {
		this.jwtUtil = jwtUtil;

	}

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
			throws ServletException, IOException {
		final String requestTokenHeader = request.getHeader("Authorization");

		String username = null;
		String jwtToken = null;

		if (requestTokenHeader != null && requestTokenHeader.startsWith("Bearer ")) {
			jwtToken = requestTokenHeader.substring(7);
			log.debug("Received JWT Token: {}", jwtToken);

			try {
				username = this.jwtUtil.getUsernameFromToken(jwtToken);
			} catch (IllegalArgumentException e) {
				logger.info("Illegal Argument while fetching the username !!");
				e.printStackTrace();
			} catch (ExpiredJwtException e) {
				logger.info("Given jwt token is expired !!");
				e.printStackTrace();
			} catch (MalformedJwtException e) {
				logger.error("Malformed JWT Token: {}");
				// Handle the malformed token, e.g., log the error or return an error response
				response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Malformed JWT token");
				return;
			} catch (Exception e) {
				logger.error("An unexpected error occurred: {}");
				e.printStackTrace();
			}
		} else {
			logger.info("Invalid Header Value !! ");
		}
		if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
		    UserDetails userDetails = this.userService.loadUserByUsername(username);

		    if (this.jwtUtil.validateToken(jwtToken, userDetails)) {
		        List<String> roles = (List<String>) jwtUtil.getClaimFromToken(jwtToken, claims -> claims.get("roles", List.class));
//		        List<String> roles = (List<String>) jwtUtil.getAllClaimsFromToken(jwtToken).get("roles");

		        Set<GrantedAuthority> authorities = roles.stream()
		            .map(SimpleGrantedAuthority::new)
		            .collect(Collectors.toSet());

		        UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken =
		            new UsernamePasswordAuthenticationToken(userDetails, null, authorities);

		        usernamePasswordAuthenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

		        SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
		    }
		}


		chain.doFilter(request, response);

	}

}

//@Override
//protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
//      throws ServletException, IOException {
//  if (!hasAuthorizationBearer(request)) {
//      filterChain.doFilter(request, response);
//      return;
//  }
//  String token = getAccessToken(request);
//  if (!jwtUtil.validateToken(token, null)) {
//      filterChain.doFilter(request, response);
//      return;
//  }
//  setAuthenticationContext(token, request);
//  filterChain.doFilter(request, response);
//}

//@Override
//protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
//      throws ServletException, IOException {
//  final String requestTokenHeader = request.getHeader("Authorization");
//
//  System.out.println(requestTokenHeader); // check what we get here
//  String email = null;
//  String jwtToken = null;
//
//  if (requestTokenHeader != null && requestTokenHeader.startsWith("Bearer ")) {
//      jwtToken = requestTokenHeader.substring(7);
//      log.debug("Received JWT Token: {}", jwtToken);
//      // ... rest of the code
//
//      try {
//      	email = this.jwtUtil.getUsernameFromToken(jwtToken);
//      } catch (IllegalArgumentException e) {
//          logger.info("Illegal Argument while fetching the username !!");
//          e.printStackTrace();
//      } catch (ExpiredJwtException e) {
//          logger.info("Given jwt token is expired !!");
//          e.printStackTrace();
//      } catch (MalformedJwtException e) {
//          logger.info("Some changed has done in token !! Invalid Token");
//          e.printStackTrace();
//      } catch (Exception e) {
//          e.printStackTrace();
//      }
//  } else {
//      logger.info("Invalid Header Value !! ");
//  }
//
//  if (email != null && SecurityContextHolder.getContext().getAuthentication() == null) {
//      UserDetails userDetails = this.userService.loadUserByUsername(email);
//      Boolean validateToken = this.jwtUtil.validateToken(jwtToken, userDetails);
//
//      if (validateToken) {
//          // Check if the roles are correctly applied
//          Collection<? extends GrantedAuthority> authorities = userDetails.getAuthorities();
//          System.out.println("User Authorities: " + authorities);
//          
//          // set the authentication
//          UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
//                  userDetails, null, authorities);
//          authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
//          SecurityContextHolder.getContext().setAuthentication(authentication);
//      } else {
//          logger.info("Validation fails !!");
//      }
//  } else {
//      System.out.println("user name is null or context is not null");
//  }
//
//  chain.doFilter(request, response);
//}
//
//
