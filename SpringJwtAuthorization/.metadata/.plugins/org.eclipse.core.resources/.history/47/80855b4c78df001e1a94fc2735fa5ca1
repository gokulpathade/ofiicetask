package com.rolebasejwttoken.jwt;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.util.ObjectUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import com.rolebasejwttoken.model.CustomUserDetails;
import com.rolebasejwttoken.model.User;
import com.rolebasejwttoken.service.UserService;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.MalformedJwtException;



@Component
public class JwtTokenFilter extends OncePerRequestFilter {

   



	private final JwtTokenUtil jwtUtil;

private UserService userService;


	
	
	private static final Logger log = LoggerFactory.getLogger(JwtTokenUtil.class);
    
    
//    CustomUserDetails customUserDetails = new CustomUserDetails(user);

    
    
    
    public JwtTokenFilter(JwtTokenUtil jwtUtil ) {
        this.jwtUtil = jwtUtil;
       
        
    }

    
    
    
//    @Override
//    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
//            throws ServletException, IOException {
//        if (!hasAuthorizationBearer(request)) {
//            filterChain.doFilter(request, response);
//            return;
//        }
//        String token = getAccessToken(request);
//        if (!jwtUtil.validateToken(token, null)) {
//            filterChain.doFilter(request, response);
//            return;
//        }
//        setAuthenticationContext(token, request);
//        filterChain.doFilter(request, response);
//    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
            throws ServletException, IOException {
        final String requestTokenHeader = request.getHeader("Authorization");

        String email = null;
        String jwtToken = null;

        if (requestTokenHeader != null && requestTokenHeader.startsWith("Bearer ")) {
            jwtToken = requestTokenHeader.substring(7);
            try {
                email = jwtUtil.extractUsername(jwtToken);
            } catch (MalformedJwtException | UnsupportedJwtException | IllegalArgumentException | SignatureException e) {
                // Handle JWT parsing error
                log.error("Error parsing or validating JWT: {}", e.getMessage());
                // You may choose to return a default response or throw a custom exception
                response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Invalid JWT token");
                return;
            }
        }

        if (email != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = this.userService.loadUserByUsername(email);

            if (jwtUtil.validateToken(jwtToken, userDetails)) {
                UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken =
                        new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());

                usernamePasswordAuthenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
            }
        }

        chain.doFilter(request, response);
    }

    
    
    
    
    
    private boolean hasAuthorizationBearer(HttpServletRequest request) {
        String header = request.getHeader("Authorization");
        return !ObjectUtils.isEmpty(header) && header.startsWith("Bearer");
    }

    
    
    
    private String getAccessToken(HttpServletRequest request) {
        String header = request.getHeader("Authorization");
        return header.split(" ")[1].trim();
    }

    
    
    
    
    private void setAuthenticationContext(String token, HttpServletRequest request) {
        UserDetails userDetails = getUserDetails(token);

        UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
                userDetails, null, userDetails.getAuthorities());

        authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

        SecurityContextHolder.getContext().setAuthentication(authentication);
    }
    
    
    
    

    private UserDetails getUserDetails(String token) {
        Claims claims = jwtUtil.extractClaim(token, null);
        String subject = (String) claims.get(Claims.SUBJECT);
        String roles = (String) claims.get("roles");

        System.out.println("SUBJECT: " + subject);
        System.out.println("roles: " + roles);
        roles = roles.replace("[", "").replace("]", "");
        String[] roleNames = roles.split(",");

        List<SimpleGrantedAuthority> authorities = Arrays.stream(roleNames)
                .map(SimpleGrantedAuthority::new)
                .collect(Collectors.toList());

        String[] jwtSubject = subject.split(",");
//
//        return new CustomUserDetails(
//                Integer.parseInt(jwtSubject[0]),
//                jwtSubject[1],
//                authorities
//        );
		return getUserDetails(null);
    }
}
